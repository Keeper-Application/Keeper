// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.0
// source: session_manager.proto

package commit

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Session_SessionType int32

const (
	Session_SESSION_TYPE_UNDEFINED          Session_SessionType = 0 // fallback/default
	Session_SESSION_TYPE_TIME_BOUND         Session_SessionType = 1 // e.g. 3pm–5pm, recurring
	Session_SESSION_TYPE_GOAL_BASED         Session_SessionType = 2 // e.g. complete a checklist, task, or app usage limit
	Session_SESSION_TYPE_APP_SPECIFIC       Session_SessionType = 3 // block apps until specific apps are used (e.g. Duolingo)
	Session_SESSION_TYPE_SCREEN_TIME_BUDGET Session_SessionType = 4 // session ends when a time budget is exhausted (e.g. 60 minutes of YouTube)
	Session_SESSION_TYPE_LOCATION_BASED     Session_SessionType = 5 // triggered only in specific geofenced areas (school, library)
	Session_SESSION_TYPE_DAILY_RECURRING    Session_SessionType = 6 // scheduled daily lock window (e.g. every day 10pm–7am)
	Session_SESSION_TYPE_ONE_TIME_CHALLENGE Session_SessionType = 7 // Guardian sets a single-use challenge (e.g., "1 hour writing")
)

// Enum value maps for Session_SessionType.
var (
	Session_SessionType_name = map[int32]string{
		0: "SESSION_TYPE_UNDEFINED",
		1: "SESSION_TYPE_TIME_BOUND",
		2: "SESSION_TYPE_GOAL_BASED",
		3: "SESSION_TYPE_APP_SPECIFIC",
		4: "SESSION_TYPE_SCREEN_TIME_BUDGET",
		5: "SESSION_TYPE_LOCATION_BASED",
		6: "SESSION_TYPE_DAILY_RECURRING",
		7: "SESSION_TYPE_ONE_TIME_CHALLENGE",
	}
	Session_SessionType_value = map[string]int32{
		"SESSION_TYPE_UNDEFINED":          0,
		"SESSION_TYPE_TIME_BOUND":         1,
		"SESSION_TYPE_GOAL_BASED":         2,
		"SESSION_TYPE_APP_SPECIFIC":       3,
		"SESSION_TYPE_SCREEN_TIME_BUDGET": 4,
		"SESSION_TYPE_LOCATION_BASED":     5,
		"SESSION_TYPE_DAILY_RECURRING":    6,
		"SESSION_TYPE_ONE_TIME_CHALLENGE": 7,
	}
)

func (x Session_SessionType) Enum() *Session_SessionType {
	p := new(Session_SessionType)
	*p = x
	return p
}

func (x Session_SessionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Session_SessionType) Descriptor() protoreflect.EnumDescriptor {
	return file_session_manager_proto_enumTypes[0].Descriptor()
}

func (Session_SessionType) Type() protoreflect.EnumType {
	return &file_session_manager_proto_enumTypes[0]
}

func (x Session_SessionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Session_SessionType.Descriptor instead.
func (Session_SessionType) EnumDescriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{0, 0}
}

type Session_SessionStatus int32

const (
	Session_SESSION_STATUS_ERR    Session_SessionStatus = 0
	Session_SESSION_STATUS_ACTIVE Session_SessionStatus = 1
	Session_SESSION_STATUS_ENDED  Session_SessionStatus = 2
	Session_SESSION_SUSPENDED     Session_SessionStatus = 3
	Session_SESSION_EXPIRED       Session_SessionStatus = 4
)

// Enum value maps for Session_SessionStatus.
var (
	Session_SessionStatus_name = map[int32]string{
		0: "SESSION_STATUS_ERR",
		1: "SESSION_STATUS_ACTIVE",
		2: "SESSION_STATUS_ENDED",
		3: "SESSION_SUSPENDED",
		4: "SESSION_EXPIRED",
	}
	Session_SessionStatus_value = map[string]int32{
		"SESSION_STATUS_ERR":    0,
		"SESSION_STATUS_ACTIVE": 1,
		"SESSION_STATUS_ENDED":  2,
		"SESSION_SUSPENDED":     3,
		"SESSION_EXPIRED":       4,
	}
)

func (x Session_SessionStatus) Enum() *Session_SessionStatus {
	p := new(Session_SessionStatus)
	*p = x
	return p
}

func (x Session_SessionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Session_SessionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_session_manager_proto_enumTypes[1].Descriptor()
}

func (Session_SessionStatus) Type() protoreflect.EnumType {
	return &file_session_manager_proto_enumTypes[1]
}

func (x Session_SessionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Session_SessionStatus.Descriptor instead.
func (Session_SessionStatus) EnumDescriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{0, 1}
}

type CommitRequest_UserType int32

const (
	CommitRequest_USER     CommitRequest_UserType = 0
	CommitRequest_GUARDIAN CommitRequest_UserType = 1
)

// Enum value maps for CommitRequest_UserType.
var (
	CommitRequest_UserType_name = map[int32]string{
		0: "USER",
		1: "GUARDIAN",
	}
	CommitRequest_UserType_value = map[string]int32{
		"USER":     0,
		"GUARDIAN": 1,
	}
)

func (x CommitRequest_UserType) Enum() *CommitRequest_UserType {
	p := new(CommitRequest_UserType)
	*p = x
	return p
}

func (x CommitRequest_UserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommitRequest_UserType) Descriptor() protoreflect.EnumDescriptor {
	return file_session_manager_proto_enumTypes[2].Descriptor()
}

func (CommitRequest_UserType) Type() protoreflect.EnumType {
	return &file_session_manager_proto_enumTypes[2]
}

func (x CommitRequest_UserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommitRequest_UserType.Descriptor instead.
func (CommitRequest_UserType) EnumDescriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{1, 0}
}

type CommitResponse_CommitStatus int32

const (
	CommitResponse_E_EXISTS       CommitResponse_CommitStatus = 0
	CommitResponse_E_ACCESS       CommitResponse_CommitStatus = 1
	CommitResponse_E_LIMITREACHED CommitResponse_CommitStatus = 2
	CommitResponse_E_INEXISTENT   CommitResponse_CommitStatus = 3
	CommitResponse_E_PERMISSION   CommitResponse_CommitStatus = 4
	CommitResponse_E_BUSY         CommitResponse_CommitStatus = 5
	CommitResponse_S_OK           CommitResponse_CommitStatus = 6
)

// Enum value maps for CommitResponse_CommitStatus.
var (
	CommitResponse_CommitStatus_name = map[int32]string{
		0: "E_EXISTS",
		1: "E_ACCESS",
		2: "E_LIMITREACHED",
		3: "E_INEXISTENT",
		4: "E_PERMISSION",
		5: "E_BUSY",
		6: "S_OK",
	}
	CommitResponse_CommitStatus_value = map[string]int32{
		"E_EXISTS":       0,
		"E_ACCESS":       1,
		"E_LIMITREACHED": 2,
		"E_INEXISTENT":   3,
		"E_PERMISSION":   4,
		"E_BUSY":         5,
		"S_OK":           6,
	}
)

func (x CommitResponse_CommitStatus) Enum() *CommitResponse_CommitStatus {
	p := new(CommitResponse_CommitStatus)
	*p = x
	return p
}

func (x CommitResponse_CommitStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommitResponse_CommitStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_session_manager_proto_enumTypes[3].Descriptor()
}

func (CommitResponse_CommitStatus) Type() protoreflect.EnumType {
	return &file_session_manager_proto_enumTypes[3]
}

func (x CommitResponse_CommitStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommitResponse_CommitStatus.Descriptor instead.
func (CommitResponse_CommitStatus) EnumDescriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{2, 0}
}

type Session struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionStatus Session_SessionStatus  `protobuf:"varint,1,opt,name=session_status,json=sessionStatus,proto3,enum=Session_SessionStatus" json:"session_status,omitempty"`
	SessionType   Session_SessionType    `protobuf:"varint,2,opt,name=session_type,json=sessionType,proto3,enum=Session_SessionType" json:"session_type,omitempty"`
	SessionId     string                 `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	GuardianId    string                 `protobuf:"bytes,4,opt,name=guardian_id,json=guardianId,proto3" json:"guardian_id,omitempty"`
	UserId        []string               `protobuf:"bytes,5,rep,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Session) Reset() {
	*x = Session{}
	mi := &file_session_manager_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{0}
}

func (x *Session) GetSessionStatus() Session_SessionStatus {
	if x != nil {
		return x.SessionStatus
	}
	return Session_SESSION_STATUS_ERR
}

func (x *Session) GetSessionType() Session_SessionType {
	if x != nil {
		return x.SessionType
	}
	return Session_SESSION_TYPE_UNDEFINED
}

func (x *Session) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *Session) GetGuardianId() string {
	if x != nil {
		return x.GuardianId
	}
	return ""
}

func (x *Session) GetUserId() []string {
	if x != nil {
		return x.UserId
	}
	return nil
}

type CommitRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserType      CommitRequest_UserType `protobuf:"varint,1,opt,name=user_type,json=userType,proto3,enum=CommitRequest_UserType" json:"user_type,omitempty"`
	SessionInfo   *Session               `protobuf:"bytes,2,opt,name=session_info,json=sessionInfo,proto3" json:"session_info,omitempty"`
	TenantId      string                 `protobuf:"bytes,3,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	RequestorId   string                 `protobuf:"bytes,4,opt,name=requestor_id,json=requestorId,proto3" json:"requestor_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitRequest) Reset() {
	*x = CommitRequest{}
	mi := &file_session_manager_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitRequest) ProtoMessage() {}

func (x *CommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitRequest.ProtoReflect.Descriptor instead.
func (*CommitRequest) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{1}
}

func (x *CommitRequest) GetUserType() CommitRequest_UserType {
	if x != nil {
		return x.UserType
	}
	return CommitRequest_USER
}

func (x *CommitRequest) GetSessionInfo() *Session {
	if x != nil {
		return x.SessionInfo
	}
	return nil
}

func (x *CommitRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CommitRequest) GetRequestorId() string {
	if x != nil {
		return x.RequestorId
	}
	return ""
}

type CommitResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	CommitStatus  CommitResponse_CommitStatus `protobuf:"varint,1,opt,name=commit_status,json=commitStatus,proto3,enum=CommitResponse_CommitStatus" json:"commit_status,omitempty"`
	CommitMessage string                      `protobuf:"bytes,2,opt,name=commit_message,json=commitMessage,proto3" json:"commit_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitResponse) Reset() {
	*x = CommitResponse{}
	mi := &file_session_manager_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitResponse) ProtoMessage() {}

func (x *CommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitResponse.ProtoReflect.Descriptor instead.
func (*CommitResponse) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{2}
}

func (x *CommitResponse) GetCommitStatus() CommitResponse_CommitStatus {
	if x != nil {
		return x.CommitStatus
	}
	return CommitResponse_E_EXISTS
}

func (x *CommitResponse) GetCommitMessage() string {
	if x != nil {
		return x.CommitMessage
	}
	return ""
}

var File_session_manager_proto protoreflect.FileDescriptor

const file_session_manager_proto_rawDesc = "" +
	"\n" +
	"\x15session_manager.proto\"\xf7\x04\n" +
	"\aSession\x12=\n" +
	"\x0esession_status\x18\x01 \x01(\x0e2\x16.Session.SessionStatusR\rsessionStatus\x127\n" +
	"\fsession_type\x18\x02 \x01(\x0e2\x14.Session.SessionTypeR\vsessionType\x12\x1d\n" +
	"\n" +
	"session_id\x18\x03 \x01(\tR\tsessionId\x12\x1f\n" +
	"\vguardian_id\x18\x04 \x01(\tR\n" +
	"guardianId\x12\x17\n" +
	"\auser_id\x18\x05 \x03(\tR\x06userId\"\x8f\x02\n" +
	"\vSessionType\x12\x1a\n" +
	"\x16SESSION_TYPE_UNDEFINED\x10\x00\x12\x1b\n" +
	"\x17SESSION_TYPE_TIME_BOUND\x10\x01\x12\x1b\n" +
	"\x17SESSION_TYPE_GOAL_BASED\x10\x02\x12\x1d\n" +
	"\x19SESSION_TYPE_APP_SPECIFIC\x10\x03\x12#\n" +
	"\x1fSESSION_TYPE_SCREEN_TIME_BUDGET\x10\x04\x12\x1f\n" +
	"\x1bSESSION_TYPE_LOCATION_BASED\x10\x05\x12 \n" +
	"\x1cSESSION_TYPE_DAILY_RECURRING\x10\x06\x12#\n" +
	"\x1fSESSION_TYPE_ONE_TIME_CHALLENGE\x10\a\"\x88\x01\n" +
	"\rSessionStatus\x12\x16\n" +
	"\x12SESSION_STATUS_ERR\x10\x00\x12\x19\n" +
	"\x15SESSION_STATUS_ACTIVE\x10\x01\x12\x18\n" +
	"\x14SESSION_STATUS_ENDED\x10\x02\x12\x15\n" +
	"\x11SESSION_SUSPENDED\x10\x03\x12\x13\n" +
	"\x0fSESSION_EXPIRED\x10\x04\"\xd6\x01\n" +
	"\rCommitRequest\x124\n" +
	"\tuser_type\x18\x01 \x01(\x0e2\x17.CommitRequest.UserTypeR\buserType\x12+\n" +
	"\fsession_info\x18\x02 \x01(\v2\b.SessionR\vsessionInfo\x12\x1b\n" +
	"\ttenant_id\x18\x03 \x01(\tR\btenantId\x12!\n" +
	"\frequestor_id\x18\x04 \x01(\tR\vrequestorId\"\"\n" +
	"\bUserType\x12\b\n" +
	"\x04USER\x10\x00\x12\f\n" +
	"\bGUARDIAN\x10\x01\"\xf4\x01\n" +
	"\x0eCommitResponse\x12A\n" +
	"\rcommit_status\x18\x01 \x01(\x0e2\x1c.CommitResponse.CommitStatusR\fcommitStatus\x12%\n" +
	"\x0ecommit_message\x18\x02 \x01(\tR\rcommitMessage\"x\n" +
	"\fCommitStatus\x12\f\n" +
	"\bE_EXISTS\x10\x00\x12\f\n" +
	"\bE_ACCESS\x10\x01\x12\x12\n" +
	"\x0eE_LIMITREACHED\x10\x02\x12\x10\n" +
	"\fE_INEXISTENT\x10\x03\x12\x10\n" +
	"\fE_PERMISSION\x10\x04\x12\n" +
	"\n" +
	"\x06E_BUSY\x10\x05\x12\b\n" +
	"\x04S_OK\x10\x062\xb9\x02\n" +
	"\x0eSessionManager\x120\n" +
	"\rCreateSession\x12\x0e.CommitRequest\x1a\x0f.CommitResponse\x120\n" +
	"\rUpdateSession\x12\x0e.CommitRequest\x1a\x0f.CommitResponse\x12/\n" +
	"\fBeginSession\x12\x0e.CommitRequest\x1a\x0f.CommitResponse\x12-\n" +
	"\n" +
	"EndSession\x12\x0e.CommitRequest\x1a\x0f.CommitResponse\x120\n" +
	"\rDeleteSession\x12\x0e.CommitRequest\x1a\x0f.CommitResponse\x121\n" +
	"\x0eSuspendSession\x12\x0e.CommitRequest\x1a\x0f.CommitResponseB/Z-services/session_manager/gen/sessionpb;commitb\x06proto3"

var (
	file_session_manager_proto_rawDescOnce sync.Once
	file_session_manager_proto_rawDescData []byte
)

func file_session_manager_proto_rawDescGZIP() []byte {
	file_session_manager_proto_rawDescOnce.Do(func() {
		file_session_manager_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_session_manager_proto_rawDesc), len(file_session_manager_proto_rawDesc)))
	})
	return file_session_manager_proto_rawDescData
}

var file_session_manager_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_session_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_session_manager_proto_goTypes = []any{
	(Session_SessionType)(0),         // 0: Session.SessionType
	(Session_SessionStatus)(0),       // 1: Session.SessionStatus
	(CommitRequest_UserType)(0),      // 2: CommitRequest.UserType
	(CommitResponse_CommitStatus)(0), // 3: CommitResponse.CommitStatus
	(*Session)(nil),                  // 4: Session
	(*CommitRequest)(nil),            // 5: CommitRequest
	(*CommitResponse)(nil),           // 6: CommitResponse
}
var file_session_manager_proto_depIdxs = []int32{
	1,  // 0: Session.session_status:type_name -> Session.SessionStatus
	0,  // 1: Session.session_type:type_name -> Session.SessionType
	2,  // 2: CommitRequest.user_type:type_name -> CommitRequest.UserType
	4,  // 3: CommitRequest.session_info:type_name -> Session
	3,  // 4: CommitResponse.commit_status:type_name -> CommitResponse.CommitStatus
	5,  // 5: SessionManager.CreateSession:input_type -> CommitRequest
	5,  // 6: SessionManager.UpdateSession:input_type -> CommitRequest
	5,  // 7: SessionManager.BeginSession:input_type -> CommitRequest
	5,  // 8: SessionManager.EndSession:input_type -> CommitRequest
	5,  // 9: SessionManager.DeleteSession:input_type -> CommitRequest
	5,  // 10: SessionManager.SuspendSession:input_type -> CommitRequest
	6,  // 11: SessionManager.CreateSession:output_type -> CommitResponse
	6,  // 12: SessionManager.UpdateSession:output_type -> CommitResponse
	6,  // 13: SessionManager.BeginSession:output_type -> CommitResponse
	6,  // 14: SessionManager.EndSession:output_type -> CommitResponse
	6,  // 15: SessionManager.DeleteSession:output_type -> CommitResponse
	6,  // 16: SessionManager.SuspendSession:output_type -> CommitResponse
	11, // [11:17] is the sub-list for method output_type
	5,  // [5:11] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_session_manager_proto_init() }
func file_session_manager_proto_init() {
	if File_session_manager_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_session_manager_proto_rawDesc), len(file_session_manager_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_session_manager_proto_goTypes,
		DependencyIndexes: file_session_manager_proto_depIdxs,
		EnumInfos:         file_session_manager_proto_enumTypes,
		MessageInfos:      file_session_manager_proto_msgTypes,
	}.Build()
	File_session_manager_proto = out.File
	file_session_manager_proto_goTypes = nil
	file_session_manager_proto_depIdxs = nil
}
